{"version":3,"file":"static/js/566.8c3b4488.chunk.js","mappings":"wNAKMA,EAAO,WACX,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GAIvBE,KAAKC,OAAS,OAAQC,EAAAA,EAAAA,KANb,4CAQX,WACE,OAAQC,EAAAA,EAAAA,GAAE,MAAO,CAAEC,MAAO,YAAaC,IAAKL,KAAKK,IAAKC,IAAKN,KAAKM,IAAKC,MAAOP,KAAKO,MAAOC,OAAQR,KAAKS,OAAQC,OAAQV,KAAKU,OAAQC,QAASX,KAAKW,QAAS,kBAAmBX,KAAKY,SAAWZ,KAAKC,WATxL,sCAWX,WACE,YAAqBY,IAAjBb,KAAKY,SACCT,EAAAA,EAAAA,GAAE,SAAU,KAAMH,KAAKc,iBAAiBX,EAAAA,EAAAA,GAAE,aAAc,CAAEY,GAAIf,KAAKC,QAAUD,KAAKY,UAIjFZ,KAAKc,kBAjBP,+BAqBX,WACE,IAAME,EAAgBhB,KAAKiB,aAAaC,MAAM,KAAKC,MAAMC,cACzD,OAAQjB,EAAAA,EAAAA,GAAE,UAAW,MAAMA,EAAAA,EAAAA,GAAE,SAAU,CAAEK,OAAQR,KAAKiB,aAAcI,KAAM,UAAF,OAAYL,KAAoBhB,KAAKc,mBAvBpG,yCAyBX,WACE,OAAQX,EAAAA,EAAAA,GAAE,UAAW,KAAMmB,KAAKC,MAAMvB,KAAKwB,sBAAsBC,KAAI,SAACC,EAAOC,GAAR,OAAmBxB,EAAAA,EAAAA,GAAE,SAAU,CAAEyB,IAAK,WAAF,OAAaD,GAASnB,OAAQkB,EAAMjB,OAAQoB,MAAOH,EAAMG,WAAY7B,KAAKc,mBA1B1K,mCA4BX,WACE,YAAqBD,IAAjBb,KAAKY,SACCT,EAAAA,EAAAA,GAAE,SAAU,KAAMH,KAAK8B,qBAAqB3B,EAAAA,EAAAA,GAAE,aAAc,CAAEY,GAAIf,KAAKC,QAAUD,KAAKY,UAIrFZ,KAAK8B,sBAlCP,oBAsCX,WACE,OAAQ3B,EAAAA,EAAAA,GAAE4B,EAAAA,EAAM,KAAO/B,KAAKiB,cAAgBjB,KAAKgC,yBAC9ChC,KAAKwB,sBAAwBxB,KAAKiC,+BACnCjC,KAAKkC,gCAzCE,KA4CbrC,EAAQsC,MA9CW,ksI,qDCHnB,IAAIjC,EAAS,WAGX,IAH0B,IAAdkC,EAAc,uDAAP,GACfrB,EAAK,GACLsB,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfrB,GADE0B,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAO1B","sources":["../../../packages/db-ui-elements-stencil/dist/esm/db-image.entry.js","../../../packages/db-ui-elements-stencil/dist/esm/index.browser-33b78992.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-c3ea6b1c.js';\nimport { n as nanoid } from './index.browser-33b78992.js';\n\nconst dbImageCss = \"html.sc-db-image{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}h1.sc-db-image{font-size:2em;margin:0.67em 0}dl.sc-db-image dl.sc-db-image,dl.sc-db-image ol.sc-db-image,dl.sc-db-image ul.sc-db-image,ol.sc-db-image dl.sc-db-image,ul.sc-db-image dl.sc-db-image{margin:0}ol.sc-db-image ol.sc-db-image,ol.sc-db-image ul.sc-db-image,ul.sc-db-image ol.sc-db-image,ul.sc-db-image ul.sc-db-image{margin:0}hr.sc-db-image{box-sizing:content-box;color:inherit;height:0;overflow:visible}main.sc-db-image{display:block}pre.sc-db-image{font-family:monospace, monospace;font-size:1em}a.sc-db-image{background-color:transparent}abbr[title].sc-db-image{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b.sc-db-image,strong.sc-db-image{font-weight:bolder}code.sc-db-image,kbd.sc-db-image,samp.sc-db-image{font-family:monospace, monospace;font-size:1em}small.sc-db-image{font-size:80%}audio.sc-db-image,video.sc-db-image{display:inline-block}audio.sc-db-image:not([controls]){display:none;height:0}img.sc-db-image{border-style:none}svg.sc-db-image:not(:root){overflow:hidden}table.sc-db-image{border-color:inherit;text-indent:0}button.sc-db-image,input.sc-db-image,select.sc-db-image{margin:0}button.sc-db-image{overflow:visible;text-transform:none}button.sc-db-image,[type=button].sc-db-image,[type=reset].sc-db-image,[type=submit].sc-db-image{-webkit-appearance:button}fieldset.sc-db-image{padding:0.35em 0.75em 0.625em}input.sc-db-image{overflow:visible}legend.sc-db-image{box-sizing:border-box;color:inherit;display:table;max-width:100%;white-space:normal}progress.sc-db-image{display:inline-block;vertical-align:baseline}select.sc-db-image{text-transform:none}textarea.sc-db-image{margin:0;overflow:auto}[type=checkbox].sc-db-image,[type=radio].sc-db-image{box-sizing:border-box;padding:0}[type=search].sc-db-image{-webkit-appearance:textfield;outline-offset:-2px}.sc-db-image::-webkit-inner-spin-button,.sc-db-image::-webkit-outer-spin-button{height:auto}.sc-db-image::-webkit-input-placeholder{color:inherit;opacity:0.54}.sc-db-image::-webkit-search-decoration{-webkit-appearance:none}.sc-db-image::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}.sc-db-image::-moz-focus-inner{border-style:none;padding:0}.sc-db-image:-moz-focusring{outline:1px dotted ButtonText}.sc-db-image:-moz-ui-invalid{box-shadow:none}details.sc-db-image{display:block}dialog.sc-db-image{background-color:white;border:solid;color:black;display:block;height:-moz-fit-content;height:fit-content;left:0;margin:auto;padding:1em;position:absolute;right:0;width:-moz-fit-content;width:fit-content}dialog.sc-db-image:not([open]){display:none}summary.sc-db-image{display:list-item}canvas.sc-db-image{display:inline-block}template.sc-db-image{display:none}[hidden].sc-db-image{display:none}html.sc-db-image{box-sizing:border-box}*.sc-db-image,.sc-db-image::before,.sc-db-image::after{box-sizing:inherit}img.sc-db-image,embed.sc-db-image,iframe.sc-db-image,object.sc-db-image,video.sc-db-image{height:auto;max-width:100%}iframe.sc-db-image{border:0}nav.sc-db-image ol.sc-db-image,nav.sc-db-image ul.sc-db-image,[role=navigation].sc-db-image ol.sc-db-image,[role=navigation].sc-db-image ul.sc-db-image{list-style:url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'/%3E\\\");margin:0;padding:0}.sc-db-image:root{--db-focus-outline-offset:1px;--db-focus-outline-color:#2c95c4}.sc-db-image:is(a,button.sc-db-image,input.sc-db-image,textarea.sc-db-image,summary).sc-db-image{--db-focus-outline-size:max(2px, 0.08em)}.sc-db-image:is(a,button.sc-db-image,input.sc-db-image,textarea.sc-db-image,summary).sc-db-image:focus-visible{outline:var(--db-focus-outline-size) var(--db-focus-outline-style, solid) var(--db-focus-outline-color, currentColor);outline-offset:var(--db-focus-outline-offset, var(--db-focus-outline-size))}body.sc-db-image,div.sc-db-image,button.sc-db-image,input.sc-db-image,select.sc-db-image,textarea.sc-db-image{font-family:\\\"DB Screen Sans\\\", Helvetica, Arial, sans-serif;color:#282d37;font-size:1rem;font-weight:400;line-height:1.5}.elm-image.is-logo.sc-db-image{height:auto;margin:0.2rem 1rem 0.2rem 0;max-width:200px}.cmp-brand.sc-db-image .elm-image.is-logo.sc-db-image{width:39px}figure.sc-db-image{margin:0}\";\n\nconst DbImage = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * Optional id for the caption aria label - otherwise random id will be set\n     */\n    this.ariaid = 'db-' + nanoid();\n  }\n  getBasicImage() {\n    return (h(\"img\", { class: \"elm-image\", alt: this.alt, src: this.src, width: this.width, srcSet: this.srcset, height: this.height, loading: this.loading, \"aria-labelledby\": this.caption && this.ariaid }));\n  }\n  basicImageCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (h(\"figure\", null, this.getBasicImage(), h(\"figcaption\", { id: this.ariaid }, this.caption)));\n    }\n    else {\n      {\n        return this.getBasicImage();\n      }\n    }\n  }\n  getPictureWrapper() {\n    const fileExtension = this.modernformat.split('.').pop().toLowerCase();\n    return (h(\"picture\", null, h(\"source\", { srcSet: this.modernformat, type: `'image/${fileExtension}` }), this.getBasicImage()));\n  }\n  getResponsivePictureWrapper() {\n    return (h(\"picture\", null, JSON.parse(this.responsivemediaquery).map((query, index) => (h(\"source\", { key: `picture-${index}`, srcSet: query.srcset, media: query.media }))), this.getBasicImage()));\n  }\n  pictureCaptionWrapper() {\n    if (this.caption !== undefined) {\n      return (h(\"figure\", null, this.getPictureWrapper(), h(\"figcaption\", { id: this.ariaid }, this.caption)));\n    }\n    else {\n      {\n        return this.getPictureWrapper();\n      }\n    }\n  }\n  render() {\n    return (h(Host, null, (this.modernformat && this.pictureCaptionWrapper()) ||\n      (this.responsivemediaquery && this.getResponsivePictureWrapper()) ||\n      this.basicImageCaptionWrapper()));\n  }\n};\nDbImage.style = dbImageCss;\n\nexport { DbImage as db_image };\n","let nanoid = (size = 21) => {\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n  while (size--) {\n    let byte = bytes[size] & 63;\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n  return id\n};\n\nexport { nanoid as n };\n"],"names":["DbImage","hostRef","registerInstance","this","ariaid","nanoid","h","class","alt","src","width","srcSet","srcset","height","loading","caption","undefined","getBasicImage","id","fileExtension","modernformat","split","pop","toLowerCase","type","JSON","parse","responsivemediaquery","map","query","index","key","media","getPictureWrapper","Host","pictureCaptionWrapper","getResponsivePictureWrapper","basicImageCaptionWrapper","style","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}