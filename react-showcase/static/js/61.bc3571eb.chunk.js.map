{"version":3,"file":"static/js/61.bc3571eb.chunk.js","mappings":"+MAKMA,EAAQ,WACZ,WAAYC,IAAS,gBACnBC,EAAAA,EAAAA,GAAiBC,KAAMF,GACvBE,KAAKC,UAAWC,EAAAA,EAAAA,GAAYF,KAAM,WAAY,GAI9CA,KAAKG,OAAS,OAAQC,EAAAA,EAAAA,KAPZ,2CASZ,SAAaC,GACXL,KAAKC,SAASK,KAAKD,KAVT,oBAYZ,WAAS,WACP,OAAQE,EAAAA,EAAAA,GAAEC,EAAAA,EAAM,MAAMD,EAAAA,EAAAA,GAAE,QAAS,CAAEE,KAAM,WAAYC,KAAM,SAAUC,MAAO,aAAcC,SAAUZ,KAAKY,SAAUC,QAASb,KAAKa,QAASC,GAAId,KAAKG,OAAQY,SAAU,SAACV,GAAD,OAAW,EAAKW,aAAaX,OAAWE,EAAAA,EAAAA,GAAE,QAAS,CAAEI,MAAO,YAAaM,QAASjB,KAAKG,SAAUI,EAAAA,EAAAA,GAAE,OAAQ,YAbtQ,KAgBdV,EAASqB,MAlBW,4/H,qDCHpB,IAAId,EAAS,WAGX,IAH0B,IAAde,EAAc,uDAAP,GACfL,EAAK,GACLM,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfL,GADEU,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAOV","sources":["../../../packages/db-ui-elements-stencil/dist/esm/db-toggle.entry.js","../../../packages/db-ui-elements-stencil/dist/esm/index.browser-33b78992.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, H as Host } from './index-c3ea6b1c.js';\nimport { n as nanoid } from './index.browser-33b78992.js';\n\nconst dbToggleCss = \"html,:host{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}h1{font-size:2em;margin:0.67em 0}dl dl,dl ol,dl ul,ol dl,ul dl{margin:0}ol ol,ol ul,ul ol,ul ul{margin:0}hr{box-sizing:content-box;color:inherit;height:0;overflow:visible}main{display:block}pre{font-family:monospace, monospace;font-size:1em}a{background-color:transparent}abbr[title]{text-decoration:underline;-webkit-text-decoration:underline dotted;text-decoration:underline dotted}b,strong{font-weight:bolder}code,kbd,samp{font-family:monospace, monospace;font-size:1em}small{font-size:80%}audio,video{display:inline-block}audio:not([controls]){display:none;height:0}img{border-style:none}svg:not(:root){overflow:hidden}table{border-color:inherit;text-indent:0}button,input,select{margin:0}button{overflow:visible;text-transform:none}button,[type=button],[type=reset],[type=submit]{-webkit-appearance:button}fieldset{padding:0.35em 0.75em 0.625em}input{overflow:visible}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;white-space:normal}progress{display:inline-block;vertical-align:baseline}select{text-transform:none}textarea{margin:0;overflow:auto}[type=checkbox],[type=radio]{box-sizing:border-box;padding:0}[type=search]{-webkit-appearance:textfield;outline-offset:-2px}::-webkit-inner-spin-button,::-webkit-outer-spin-button{height:auto}::-webkit-input-placeholder{color:inherit;opacity:0.54}::-webkit-search-decoration{-webkit-appearance:none}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}::-moz-focus-inner{border-style:none;padding:0}:-moz-focusring{outline:1px dotted ButtonText}:-moz-ui-invalid{box-shadow:none}details{display:block}dialog{background-color:white;border:solid;color:black;display:block;height:-moz-fit-content;height:fit-content;left:0;margin:auto;padding:1em;position:absolute;right:0;width:-moz-fit-content;width:fit-content}dialog:not([open]){display:none}summary{display:list-item}canvas{display:inline-block}template{display:none}[hidden]{display:none}html,:host{box-sizing:border-box}*,::before,::after{box-sizing:inherit}img,embed,iframe,object,video{height:auto;max-width:100%}iframe{border:0}nav ol,nav ul,[role=navigation] ol,[role=navigation] ul{list-style:url(\\\"data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg'/%3E\\\");margin:0;padding:0}:root{--db-focus-outline-offset:1px;--db-focus-outline-color:#2c95c4}:is(a,button,input,textarea,summary){--db-focus-outline-size:max(2px, 0.08em)}:is(a,button,input,textarea,summary):focus-visible{outline:var(--db-focus-outline-size) var(--db-focus-outline-style, solid) var(--db-focus-outline-color, currentColor);outline-offset:var(--db-focus-outline-offset, var(--db-focus-outline-size))}body,:host,div,button,input,select,textarea{font-family:\\\"DB Screen Sans\\\", Helvetica, Arial, sans-serif;color:#282d37;font-size:1rem;font-weight:400;line-height:1.5}a{color:inherit}.elm-toggle{appearance:none;width:3rem;height:1.5rem;display:inline-block;position:relative;border-radius:0.75rem;border:none;background-color:#646973;transition:background-color 0.3s ease}@media (prefers-reduced-motion: reduce){.elm-toggle{transition-duration:0.01s !important}}.elm-toggle+.elm-label{vertical-align:top}.elm-toggle::before{content:\\\"\\\";display:block;position:absolute;left:0.125rem;top:0.125rem;width:1.25rem;height:1.25rem;background-color:#ffffff;border-radius:0.625rem;box-shadow:0 5px 30px 0 rgba(0, 0, 0, 0.05), 0 1px 5px 0 rgba(0, 0, 0, 0.15);transition:border-color, left 0.3s cubic-bezier(0.3, 1.5, 0.7, 1)}@media (prefers-reduced-motion: reduce){.elm-toggle::before{transition-duration:0.01s !important}}.elm-toggle:hover::before{background-color:#f7f7f7}.elm-toggle:active::before{width:1.5rem;transition:width 0.3s cubic-bezier(0.3, 1.5, 0.7, 1)}@media (prefers-reduced-motion: reduce){.elm-toggle:active::before{transition-duration:0.01s !important}}.elm-toggle:checked{background-color:#131821}.elm-toggle:checked::before{left:unset;right:0.125rem}.elm-toggle:disabled,.elm-toggle:disabled+label{opacity:0.5}:host{display:block}.elm-toggle::before{box-sizing:inherit}\";\n\nconst DbToggle = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.dbChange = createEvent(this, \"dbChange\", 7);\n    /**\n     * Optional id for the label - otherwise random id will be set\n     */\n    this.htmlid = 'db-' + nanoid();\n  }\n  handleChange(event) {\n    this.dbChange.emit(event);\n  }\n  render() {\n    return (h(Host, null, h(\"input\", { type: \"checkbox\", role: \"switch\", class: \"elm-toggle\", disabled: this.disabled, checked: this.checked, id: this.htmlid, onChange: (event) => this.handleChange(event) }), h(\"label\", { class: \"elm-label\", htmlFor: this.htmlid }, h(\"slot\", null))));\n  }\n};\nDbToggle.style = dbToggleCss;\n\nexport { DbToggle as db_toggle };\n","let nanoid = (size = 21) => {\n  let id = '';\n  let bytes = crypto.getRandomValues(new Uint8Array(size));\n  while (size--) {\n    let byte = bytes[size] & 63;\n    if (byte < 36) {\n      id += byte.toString(36);\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase();\n    } else if (byte < 63) {\n      id += '_';\n    } else {\n      id += '-';\n    }\n  }\n  return id\n};\n\nexport { nanoid as n };\n"],"names":["DbToggle","hostRef","registerInstance","this","dbChange","createEvent","htmlid","nanoid","event","emit","h","Host","type","role","class","disabled","checked","id","onChange","handleChange","htmlFor","style","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase"],"sourceRoot":""}